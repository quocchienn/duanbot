import asyncio
import json
import os
from datetime import datetime, timedelta, timezone

from telegram import Update, ChatPermissions, ChatMember
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# ====== GHI TH·∫≤NG TOKEN ·ªû ƒê√ÇY ======
BOT_TOKEN = "GHI TH·∫≤NG TOKEN ·ªû ƒê√ÇY "

CONFIG_FILE = "config.json"

def load_config():
    """T·∫£i c·∫•u h√¨nh: th·ªùi gian mute & danh s√°ch t·ª´ c·∫•m."""
    cfg = {
        "mute_minutes": 10,
        "banned_words": ["spam", "qu·∫£ng c√°o", "link l·ª´a ƒë·∫£o"]
    }
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                file_cfg = json.load(f)
                if isinstance(file_cfg, dict):
                    cfg["mute_minutes"] = file_cfg.get("mute_minutes", cfg["mute_minutes"])
                    bw = file_cfg.get("banned_words", [])
                    if isinstance(bw, list) and bw:
                        cfg["banned_words"] = bw
        except Exception:
            pass
    return cfg

def save_config(cfg):
    """L∆∞u c·∫•u h√¨nh xu·ªëng file (ƒë·ªÉ l·ªánh admin c√≥ t√°c d·ª•ng l√¢u d√†i)."""
    try:
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(cfg, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"Save config failed: {e}")

CONFIG = load_config()

# ---------- Helpers ----------
async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(update.effective_chat.id, user_id)
        return chat_member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except Exception:
        return False

def extract_text_from_message(update: Update) -> str | None:
    """
    L·∫•y n·ªôi dung ch·ªØ t·ª´ m·ªçi lo·∫°i tin:
    - Tin nh·∫Øn text: message.text
    - Media c√≥ ch√∫ th√≠ch: message.caption (·∫£nh/video/document/animation/audio...)
    """
    msg = update.effective_message
    if not msg:
        return None
    if msg.text:
        return msg.text
    if msg.caption:
        return msg.caption
    return None

def text_has_banned_word(text: str) -> str | None:
    if not text:
        return None
    low = text.lower()
    for w in CONFIG["banned_words"]:
        w_norm = str(w).strip().lower()
        if w_norm and w_norm in low:
            return w
    return None

async def send_and_autodelete(chat, text: str, seconds: int = 10, **kwargs):
    """G·ª≠i tin nh·∫Øn v√† t·ª± xo√° sau 'seconds' gi√¢y."""
    try:
        m = await chat.send_message(text, **kwargs)
        await asyncio.sleep(seconds)
        try:
            await m.delete()
        except Exception:
            pass
    except Exception as e:
        print(f"send_and_autodelete error: {e}")

# ---------- Core x·ª≠ l√Ω tin ----------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg or msg.from_user is None:
        return

    # B·ªè qua l·ªánh; l·ªánh ƒë·ªÉ CommandHandler x·ª≠ l√Ω
    text = extract_text_from_message(update)
    if not text:
        return

    # B·ªè qua admin (t√πy nhu c·∫ßu: n·∫øu mu·ªën ph·∫°t c·∫£ admin th√¨ xo√° block n√†y)
    if await is_admin(update, context, msg.from_user.id):
        return

    matched = text_has_banned_word(text)
    if matched:
        # 1) Xo√° tin nh·∫Øn vi ph·∫°m
        try:
            await msg.delete()
        except Exception as e:
            print(f"Delete failed: {e}")

        # 2) Mute ng∆∞·ªùi vi ph·∫°m (v21: ch·ªâ c·∫ßn can_send_messages=False)
        mute_minutes = int(CONFIG.get("mute_minutes", 10))
        until = datetime.now(tz=timezone.utc) + timedelta(minutes=mute_minutes)
        perms_block = ChatPermissions(can_send_messages=False)

        try:
            await context.bot.restrict_chat_member(
                chat_id=update.effective_chat.id,
                user_id=msg.from_user.id,
                permissions=perms_block,
                until_date=until
            )
            # 3) Th√¥ng b√°o (t·ª± xo√° sau 10s)
            await send_and_autodelete(
                msg.chat,
                f"‚ö†Ô∏è @{msg.from_user.username or msg.from_user.id} "
                f"ƒë√£ b·ªã c·∫•m chat {mute_minutes} ph√∫t v√¨ d√πng t·ª´ c·∫•m: ‚Äú{matched}‚Äù.",
                seconds=10
            )
        except Exception as e:
            print(f"Restrict failed: {e}")

# ---------- Admin commands ----------
async def addword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context, update.effective_user.id):
        return
    if not context.args:
        await send_and_autodelete(update.effective_chat, "C√°ch d√πng: /addword t·ª´_c·∫•m")
        return
    word = " ".join(context.args).strip()
    if word.lower() in [w.lower() for w in CONFIG["banned_words"]]:
        await send_and_autodelete(update.effective_chat, f"‚Äú{word}‚Äù ƒë√£ c√≥ trong danh s√°ch.")
        return
    CONFIG["banned_words"].append(word)
    save_config(CONFIG)
    await send_and_autodelete(update.effective_chat, f"‚úÖ ƒê√£ th√™m t·ª´ c·∫•m: ‚Äú{word}‚Äù")

async def delword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context, update.effective_user.id):
        return
    if not context.args:
        await send_and_autodelete(update.effective_chat, "C√°ch d√πng: /delword t·ª´_c·∫•m")
        return
    word = " ".join(context.args).strip().lower()
    before = len(CONFIG["banned_words"])
    CONFIG["banned_words"] = [w for w in CONFIG["banned_words"] if str(w).lower() != word]
    save_config(CONFIG)
    if len(CONFIG["banned_words"]) < before:
        await send_and_autodelete(update.effective_chat, f"üóëÔ∏è ƒê√£ xo√°: ‚Äú{word}‚Äù")
    else:
        await send_and_autodelete(update.effective_chat, f"Kh√¥ng t√¨m th·∫•y: ‚Äú{word}‚Äù")

async def listwords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context, update.effective_user.id):
        return
    words = CONFIG.get("banned_words", [])
    if not words:
        await send_and_autodelete(update.effective_chat, "Danh s√°ch t·ª´ c·∫•m ƒëang tr·ªëng.")
    else:
        items = "\n".join(f"‚Ä¢ {w}" for w in words)
        await send_and_autodelete(update.effective_chat, f"üìÑ Danh s√°ch t·ª´ c·∫•m:\n{items}")

async def setmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context, update.effective_user.id):
        return
    if not context.args:
        await send_and_autodelete(update.effective_chat, "C√°ch d√πng: /setmute s·ªë_ph√∫t (vd: /setmute 30)")
        return
    try:
        minutes = int(context.args[0])
        if minutes < 1 or minutes > 7 * 24 * 60:
            raise ValueError
        CONFIG["mute_minutes"] = minutes
        save_config(CONFIG)
        await send_and_autodelete(update.effective_chat, f"‚è±Ô∏è Th·ªùi gian c·∫•m chat: {minutes} ph√∫t.")
    except ValueError:
        await send_and_autodelete(update.effective_chat, "S·ªë ph√∫t kh√¥ng h·ª£p l·ªá.")

def extract_target_user_id(update: Update) -> int | None:
    msg = update.effective_message
    if msg.reply_to_message and msg.reply_to_message.from_user:
        return msg.reply_to_message.from_user.id
    return None

async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context, update.effective_user.id):
        return
    target_id = extract_target_user_id(update)
    if not target_id:
        await send_and_autodelete(update.effective_chat, "H√£y reply v√†o tin nh·∫Øn c·ªßa ng∆∞·ªùi c·∫ßn g·ª° c·∫•m r·ªìi g·ª≠i /unmute.")
        return
    perms_allow = ChatPermissions(can_send_messages=True)
    try:
        await context.bot.restrict_chat_member(
            chat_id=update.effective_chat.id,
            user_id=target_id,
            permissions=perms_allow,
            until_date=0
        )
        await send_and_autodelete(update.effective_chat, "‚úÖ ƒê√£ g·ª° c·∫•m chat.")
    except Exception as e:
        await send_and_autodelete(update.effective_chat, f"Kh√¥ng g·ª° ƒë∆∞·ª£c h·∫°n ch·∫ø: {e}")

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context, update.effective_user.id):
        return
    words = CONFIG.get("banned_words", [])
    mute_minutes = CONFIG.get("mute_minutes", 10)
    await send_and_autodelete(
        update.effective_chat,
        f"‚öôÔ∏è C·∫•u h√¨nh:\n- Th·ªùi gian c·∫•m: {mute_minutes} ph√∫t\n- S·ªë t·ª´ c·∫•m: {len(words)}"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_and_autodelete(
        update.effective_chat,
        "üëã Bot c·∫•m chat theo t·ª´ c·∫•m ƒë√£ s·∫µn s√†ng.\n"
        "Admin d√πng /addword, /delword, /listwords, /setmute, /unmute, /status."
    )

def main():
    token = BOT_TOKEN or os.environ.get("BOT_TOKEN")
    if not token:
        raise RuntimeError("Thi·∫øu BOT_TOKEN (ch√®n th·∫≥ng v√†o code ho·∫∑c ƒë·∫∑t ENV).")

    app = Application.builder().token(token).build()

    # L·ªánh admin
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addword", addword))
    app.add_handler(CommandHandler("delword", delword))
    app.add_handler(CommandHandler("listwords", listwords))
    app.add_handler(CommandHandler("setmute", setmute))
    app.add_handler(CommandHandler("unmute", unmute))
    app.add_handler(CommandHandler("status", status_cmd))

    # B·∫Øt m·ªçi tin kh√¥ng ph·∫£i command; b√™n trong t·ª± l·ªçc text/caption
    app.add_handler(MessageHandler(~filters.COMMAND, handle_message))

    print("Bot is running...")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()

